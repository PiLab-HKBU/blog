import{_ as r,W as s,X as o,Y as e,Z as a,$ as n,a0 as t,C as c}from"./framework-43e8ff1c.js";const p={},l={href:"https://lileipisces.github.io/",target:"_blank",rel:"noopener noreferrer"},d=e("p",null,[e("em",null,"Department of Computer Science, Hong Kong Baptist University")],-1),h={href:"https://lileipisces.github.io/",target:"_blank",rel:"noopener noreferrer"},g={href:"http://yongfeng.me/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.comp.hkbu.edu.hk/~lichen/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://doi.org/10.1145/3569423",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/lileipisces/BPER",target:"_blank",rel:"noopener noreferrer"},b={href:"https://lileipisces.github.io/",target:"_blank",rel:"noopener noreferrer"},_={href:"http://yongfeng.me/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.comp.hkbu.edu.hk/~lichen/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://doi.org/10.1145/3404835.3463248",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/lileipisces/EXTRA",target:"_blank",rel:"noopener noreferrer"},k={href:"https://lifehkbueduhk-my.sharepoint.com/:f:/g/personal/16484134_life_hkbu_edu_hk/EosVj7lRYKhBgpfdXRUDm84Ba4y0Kuueye3e1m0e3dQYEQ?e=4PUnLC",target:"_blank",rel:"noopener noreferrer"},v=t('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>向用户解释为什么系统会推荐某些物品至关重要，因为它可以帮助用户做出更好的决策，提高他们的满意度，还可以获得他们对推荐系统的信任。因而，可解释推荐系统的研究得到了学术界和工业界的广泛关注，产生了各种各样的模型。但它们的评估方法因模型而异，这就使得不同模型之间的对比变得异常困难。为了实现一种统一的推荐解释评估方法，我们创建了一套名为EXTRA的数据集。在这套数据集上，推荐可解释性可以通过面向排序的指标来评估，如NDCG。基本思想是训练一个模型，让它从众多解释中选出一些比较恰当的来解释推荐的物品。</p><p>有了这套数据集，我们进而将传统的物品排序扩展成物品-解释联合排序，用以研究刻意选一些解释是否可以达到某些目标，如提高推荐准确度。有个难点是，用户-物品-解释三元组数据的稀疏性不可避免地比传统的用户-物品二元组数据严重，因为并非每对用户-物品都与所有解释相关联。为了解决这个问题，我们将用户-物品-解释三元组看作两个二元组来分别进行矩阵分解。基于这个想法，我们设计了两种模型。其一是仅使用ID的模型，在未来它或许可以用在其他类型的解释上，例如图像。其二是基于BERT的模型，它可以利用解释文本的语义特征来提高排序性能。</p><h2 id="搜索引擎vs-解释排序" tabindex="-1"><a class="header-anchor" href="#搜索引擎vs-解释排序" aria-hidden="true">#</a> 搜索引擎vs.解释排序</h2><p>搜索引擎（如Google和Bing）是人们日常生活中获取信息的一种常用工具。当用户给搜索引擎输入一个关键词（如“苹果”），它会返回成千上万的网页（如“苹果公司”和“水果苹果”），用户则可以根据自己的兴趣和需求点击查看相应的页面（如图1）。</p><p><img src="https://picx.zhimg.com/80/v2-b2d0ecd76380cd9f12745a227cb7ddde_1440w.png?source=d16d100b" alt="img" loading="lazy"> Figure 1: 搜索引擎.</p><p>受搜索引擎的启发，我们认为推荐物品的解释也是可以排序的（如图2）。我们首先准备很多解释条目，再让推荐系统解释模型去给不同用户-物品返回恰当的解释。举例来说，当一个电影推荐系统（如豆瓣）给用户推荐电影《冰雪奇缘》时，它可以提供这些解释：“适合和家人一起看”、“动画效果优良”、“故事讲得好”。这些解释一开始就存在，只不过针对不同的电影和用户，返回的解释不一样。有了包含这些解释的数据集，研究人员的重心就可以放在如何设计出更好的排序算法上。</p><p><img src="https://picx.zhimg.com/80/v2-47edb3eb774419980aed4d11fba7210e_1440w.png?source=d16d100b" alt="img" loading="lazy"> Figure 2: 解释排序.</p><h2 id="数据集创建" tabindex="-1"><a class="header-anchor" href="#数据集创建" aria-hidden="true">#</a> 数据集创建</h2><p>构建数据集也遇到了一些挑战。首先，用户-物品-解释三元组在现有的推荐系统中很少见，因此如何找到替代方案是一个问题。受群体智慧的启发，我们的解决方案是把各个用户评论中共同出现的句子抽取出来作为解释（如图3），以便将不同的用户-物品组合与某一个特定的解释联系起来，这样就可以创建出用户-物品-解释三元组数据了（如图4）。通过找出评论中常用的句子，也可以保证解释的可读性和表达性。</p><p><img src="https://pic1.zhimg.com/80/v2-f3732ca1ef06608d0416979323a84504_1440w.png?source=d16d100b" alt="img" loading="lazy"> Figure 3: 不同用户评论中重复的句子.</p><p><img src="https://pica.zhimg.com/80/v2-f3b0adb2470990852a0e440841d2c3b3_1440w.png?source=d16d100b" alt="img" loading="lazy"> Figure 4: 用户-物品-解释三元组交互数据.</p>',12),w=e("p",null,[a("这个方案带来了第二个挑战，即如何在一个数据集的评论中检测出几乎相同的句子。聚类是不可行的，因为它需要预先定义类别的数量。计算数据集中任意两个句子之间的相似度是可行的，但效率较低，因为它的时间复杂度是"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"O"),e("mo",{stretchy:"false"},"("),e("msup",null,[e("mi",null,"n"),e("mn",null,"2")]),e("mo",{stretchy:"false"},")")]),e("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),e("span",{class:"mopen"},"("),e("span",{class:"mord"},[e("span",{class:"mord mathnormal"},"n"),e("span",{class:"msupsub"},[e("span",{class:"vlist-t"},[e("span",{class:"vlist-r"},[e("span",{class:"vlist",style:{height:"0.8141em"}},[e("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[e("span",{class:"pstrut",style:{height:"2.7em"}}),e("span",{class:"sizing reset-size6 size3 mtight"},[e("span",{class:"mord mtight"},"2")])])])])])])]),e("span",{class:"mclose"},")")])])]),a("。但在句子分组的每一步，实际上没有必要计算已经分好了组的句子的相似度。因此，我们可以移除这些句子来降低计算成本。为了进一步提高效率，我们采用了局部敏感哈希 (LSH) 方法（如图5），它可以在亚线性时间内检测出重复文本。")],-1),E=t('<p><img src="https://picx.zhimg.com/80/v2-090919678ac18edd5bceca054146ba1b_1440w.png?source=d16d100b" alt="img" loading="lazy"> Figure 5: 针对重复句子检测，普通方法同我们提出的方法之间的效率对比.</p><p>我们基于Amazon Movies &amp; TV，TripAdvisor和Yelp创建了三个数据集。同时也公开了数据创建的代码，这样其他研究人员也可以根据需求创建自己的数据集。图6是数据集中解释的例子，可以看出它们都能较好地反映出相应领域的特点。</p><p><img src="https://pica.zhimg.com/80/v2-8f9a956f78ad183dccd349f01560eb43_1440w.png?source=d16d100b" alt="img" loading="lazy"> Figure 6: 三个数据集中解释的例子.</p><h2 id="问题定义" tabindex="-1"><a class="header-anchor" href="#问题定义" aria-hidden="true">#</a> 问题定义</h2><h3 id="物品排序" tabindex="-1"><a class="header-anchor" href="#物品排序" aria-hidden="true">#</a> 物品排序</h3><p>在传统的推荐场景中，给定一个用户u，推荐系统会给所有物品进行排序，返回一定数量的分值较高的物品（如M个），可以用如下公式表示：</p><figure><img src="https://picx.zhimg.com/80/v2-8284ac129ae2095a73516932d287bbea_1440w.png?source=d16d100b" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="解释排序" tabindex="-1"><a class="header-anchor" href="#解释排序" aria-hidden="true">#</a> 解释排序</h3><p>在我们提出的解释排序问题中，用户u和物品i都是给定的（既可以是用户自己的行为，也可以是推荐模型预测出来的），推荐系统会给所有解释进行排序，然后返回一定数量的分值较高的解释（如N个）：</p><figure><img src="https://pic1.zhimg.com/80/v2-3d52c05ea3dfebf31f4ec617c7092ab9_1440w.png?source=d16d100b" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="模型" tabindex="-1"><a class="header-anchor" href="#模型" aria-hidden="true">#</a> 模型</h2><p>由于解释排序的数据是用户-物品-解释三元组的形式，人们很自然会想到张量分解方法。其中一种典型的方法是将这三种实体的向量相乘得到一个标量：</p><figure><img src="https://picx.zhimg.com/80/v2-b9eba5a11876ea1eb88039326ae943dc_1440w.png?source=d16d100b" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在我们的数据中，每对用户-物品不可能跟所有解释都有关联，因此数据的稀疏性就比传统的物品排序数据大很多。由于数据的稀疏性，张量分解方法不一定有效。为了解决这个问题，我们将张量分解拆分成两组矩阵分解。这样用户-物品-解释三元组就变成了用户-解释及物品-解释两个两元组了，类似于传统推荐中的用户-物品二元组。我们把该方法命名为BPER。</p><figure><img src="https://pica.zhimg.com/80/v2-eddc5b13fbcdd42b5059ef633259c58c_1440w.png?source=d16d100b" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上面这种方法只用到了ID信息。除此之外，解释文本的语义信息亦可提高模型的排序性能。举例来说，对于推荐电影的解释，“表演很棒”和“表演不错”意思差不多，因而它们在排序列表里的位置也应该差不多。但是仅采用ID的方法可能无法有效区分二者。因此，我们进而探索解释文本是否有助于提高排序效果。我们用BERT来提取解释文本中的语义信息，得到的向量用于增强解释ID对应的向量。该方法记作BPER+。</p><figure><img src="https://picx.zhimg.com/80/v2-51c77c4a5b10f0ed585afaaee260b6a3_1440w.png?source=d16d100b" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>作为第一个对推荐解释进行排序的工作，为了达到可复现性的目的，我们把两种方法都设计得相对简单。</p><p>为了进一步探究刻意选出某些解释是否可以同时提高推荐和解释的效果，我们将物品和解释进行联合排序。具体来说，我们将推荐任务的目标函数和解释的目标函数融入到一个多任务学习的框架中。</p><figure><img src="https://pic1.zhimg.com/80/v2-2651f23aeb47e9a72a1477469f5eb8fa_1440w.png?source=d16d100b" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="结果" tabindex="-1"><a class="header-anchor" href="#结果" aria-hidden="true">#</a> 结果</h2><p>图7的结果显示，在只用到ID时，我们的方法比传统的协同过滤和张量分解表现都要好。在加上解释文本的语义信息之后，解释排序效果变得更好了，尤其是在NDCG上。</p><p><img src="https://picx.zhimg.com/80/v2-77904ed0fa0e73ccd7592b10d248b65b_1440w.png?source=d16d100b" alt="img" loading="lazy"> Figure 7: 解释排序实验结果.</p><p>另外，对于物品-解释联合排序，在一些情况下（图8绿框），推荐和解释效果可以同时得到提高。</p><p><img src="https://pic1.zhimg.com/80/v2-f28b0e3079ba2783c6b4790a36a4d015_1440w.png?source=d16d100b" alt="img" loading="lazy"> Figure 8: 物品-解释联合排序.</p><h2 id="展望" tabindex="-1"><a class="header-anchor" href="#展望" aria-hidden="true">#</a> 展望</h2><p>把文本扩展到图像上从而实现多模态推荐解释排序，会是一个有趣的课题。同时，如果能跟工业界合作做一个线上测试，可以了解这些解释会对真实用户产生哪些影响。另外，我们对于推荐解释涉及的道德层面的问题也有很大兴趣。譬如，我们让模型刻意选出某些解释来提高推荐效果，会不会导致推荐物品没有解释里描述得那么好？更深层次的问题是，这些解释在诱导用户点击和购买时会不会欺骗用户？这就会造成人与机器之间的信任问题了。</p><figure><img src="https://pica.zhimg.com/80/v2-0853645e04cd85e0035cf81c85f96f48_1440w.png?source=d16d100b" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',28);function R(T,I){const i=c("ExternalLinkIcon");return s(),o("div",null,[e("p",null,[e("em",null,[a("Author: "),e("a",l,[a("Lei LI"),n(i)])])]),d,e("ul",null,[e("li",null,[e("a",h,[a("Lei Li"),n(i)]),a(", "),e("a",g,[a("Yongfeng Zhang"),n(i)]),a(", "),e("a",m,[a("Li Chen"),n(i)]),a(". On the Relationship between Explanation and Recommendation: Learning to Rank Explanations for Improved Performance. ACM Transactions on Intelligent Systems and Technology (TIST), 2023. ["),e("a",f,[a("Paper"),n(i)]),a("]["),e("a",u,[a("Code"),n(i)]),a("]")]),e("li",null,[e("a",b,[a("Lei Li"),n(i)]),a(", "),e("a",_,[a("Yongfeng Zhang"),n(i)]),a(", "),e("a",x,[a("Li Chen"),n(i)]),a(". EXTRA: Explanation Ranking Datasets for Explainable Recommendation. SIGIR'21. ["),e("a",z,[a("Paper"),n(i)]),a("]["),e("a",y,[a("Code"),n(i)]),a("]["),e("a",k,[a("Datasets"),n(i)]),a("]")])]),v,w,E])}const B=r(p,[["render",R],["__file","TIST2023.html.vue"]]);export{B as default};
